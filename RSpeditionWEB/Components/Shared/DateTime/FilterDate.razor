@inherits ChildComponentBaseClass

@if (this.IsRender)
{
<div>
    <label_small_black>
        @this.LabelFor
    </label_small_black>
</div>
    <div>
        @*Выбор фильтра - все, пустые, не пустые, настройка*@
        <SelectFiltersValues SendToParentData="@((FiltersValues val) =>
                                                                     {
                                                                         this.FiltersValueSelected = val;
                                                                         if (this.FiltersValueSelected == FiltersValues.Настройка)
                                                                         {
                                                                             this.isRendered_DatesFilters = true;
                                                                         }
                                                                         else
                                                                         {
                                                                             this.isRendered_DatesFilters = false;
                                                                             this.InitMembers();
                                                                         }

                                                                         Func<Task> f = async () =>
                                                                        {
                                                                            await this.ProgressBarOpen();
                                                                            if (this.SendTupleToParent.HasDelegate)
                                                                                await this.SendTupleToParent.InvokeAsync(this.SelectedDataToParent);
                                                                            await this.ProgressBarClose();
                                                                        };
                                                                        f();
                                                                     })" />
        @if (this.isRendered_DatesFilters)
        {
            <div>
                @*Выбор оператора сравнения для первой даты*@
                <select size="1"
                        @bind="@this.SelectedComparisonOperator_1">
                    @for (var i = 0; i < (this.ComparisonOperatorsList?.Count ?? 0); i++)
                    {
                        var val = this.ComparisonOperatorsList.ElementAt(i);
                        if (this.SelectedComparisonOperator_1.Equals(val))
                        {
                            <option value="@val"
                                    selected>
                                @val.ToString()?.ConvertStringUpperToLowerCase()
                            </option>
                        }
                        else
                        {
                            <option value="@val">
                                @val.ToString()?.ConvertStringUpperToLowerCase()
                            </option>
                        }
                    }
                </select>
            </div>
            <div>
                @*Выбор Даты_1*@
                <input type="date"
                       class="form-control"
                       @bind="this.SelectedDate_1"
                       TValue="DateTime?" />
            </div>
            <div>
                @*Выбор логического оператора, связывающего два условия*@
                <select size="1"
                        @bind="@this.SelectedLogicOperator">
                    @for (var i = 0; i < (this.LogicOperatorsList?.Count ?? 0); i++)
                    {
                        var val = this.LogicOperatorsList.ElementAt(i);
                        if (this.SelectedLogicOperator.Equals(val))
                        {
                            <option value="@val"
                                    selected>
                                @val.ToString()?.ConvertStringUpperToLowerCase()
                            </option>
                        }
                        else
                        {
                            <option value="@val">
                                @val.ToString()?.ConvertStringUpperToLowerCase()
                            </option>
                        }
                    }
                </select>
            </div>
        }
    </div>

    @if (this.IsShowSelectSecondDate)
    {
        <div>
            @*Выбор оператора сравнения для второй даты*@
            <select size="1"
                    @bind="@this.SelectedComparisonOperator_2">
                @for (var i = 0; i < (this.ComparisonOperatorsList?.Count ?? 0); i++)
                {
                    var val = this.ComparisonOperatorsList.ElementAt(i);
                    if (this.SelectedComparisonOperator_2.Equals(val))
                    {
                        <option value="@val"
                                selected>
                            @val.ToString()?.ConvertStringUpperToLowerCase()
                        </option>
                    }
                    else
                    {
                        <option value="@val">
                            @val.ToString()?.ConvertStringUpperToLowerCase()
                        </option>
                    }
                }
            </select>

            @*Выбор Даты_2*@
            <input type="date"
                   class="form-control"
                   @bind="this.SelectedDate_2"
                   TValue="DateTime?" />
        </div>
    }
}
else
{
    <ProgressBarInner TitleProcess="Идет загрузка ...">
    </ProgressBarInner>
}

@code {
    [CascadingParameter]
    public ComponentBaseClass ComponentBaseClassCascadingParameter { get; set; }

    [Parameter]
    public EventCallback<(FiltersValues, LogicOperators, DateTime?, ComparisonOperators, DateTime?, ComparisonOperators)> SendTupleToParent { get; set; }

    [Parameter]
    public string LabelFor { get; set; }

    [Parameter]
    public DateTime? DateTimeDefault_1 { get; set; }

    [Parameter]
    public DateTime? DateTimeDefault_2 { get; set; }

    [Parameter]
    public ComparisonOperators DefaultComparisonOperators_1 { get; set; }

    [Parameter]
    public ComparisonOperators DefaultComparisonOperators_2 { get; set; }

    private bool isRendered_DatesFilters = false;

    private (FiltersValues, LogicOperators, DateTime?, ComparisonOperators, DateTime?, ComparisonOperators) SelectedDataToParent
        => (this.FiltersValueSelected,
            this.SelectedLogicOperator,
            this.SelectedDate_1,
            this.SelectedComparisonOperator_1,
            this.SelectedDate_2,
            this.SelectedComparisonOperator_2);


    private List<LogicOperators> LogicOperatorsList { get; set; }

    private List<ComparisonOperators> ComparisonOperatorsList { get; set; }

    private bool IsShowSelectSecondDate;

    private FiltersValues FiltersValueSelected { get; set; }

    private LogicOperators selectedLogicOperator;
    private LogicOperators SelectedLogicOperator
    {
        get => this.selectedLogicOperator;
        set
        {
            this.selectedLogicOperator = value;
            if (!value.Equals(LogicOperators.ДобавитьУсловие))
            {
                this.IsShowSelectSecondDate = true;
                this.selectedDate_2 = this.DateTimeDefault_2;
            }
            else
            {
                this.IsShowSelectSecondDate = false;
                this.selectedDate_2 = null;
            }
            Func<Task> f = async () =>
            {
                await this.ProgressBarOpen();
                if (this.SendTupleToParent.HasDelegate)
                    await this.SendTupleToParent.InvokeAsync(this.SelectedDataToParent);
                await this.ProgressBarClose();
            };
            f();
        }
    }

    private ComparisonOperators selectedComparisonOperator_1;
    private ComparisonOperators SelectedComparisonOperator_1
    {
        get => this.selectedComparisonOperator_1;
        set
        {
            this.selectedComparisonOperator_1 = value;
            Func<Task> f = async () =>
            {
                await this.ProgressBarOpen();
                if (this.SendTupleToParent.HasDelegate)
                    await this.SendTupleToParent.InvokeAsync(this.SelectedDataToParent);
                await this.ProgressBarClose();
            };
            f();
        }
    }

    private ComparisonOperators selectedComparisonOperator_2;
    private ComparisonOperators SelectedComparisonOperator_2
    {
        get => this.selectedComparisonOperator_2;
        set
        {
            this.selectedComparisonOperator_2 = value;
            Func<Task> f = async () =>
            {
                await this.ProgressBarOpen();
                if (this.SendTupleToParent.HasDelegate)
                    await this.SendTupleToParent.InvokeAsync(this.SelectedDataToParent);
                await this.ProgressBarClose();
            };
            f();
        }
    }

    // Выбранная дата 1
    private DateTime? selectedDate_1;
    private DateTime? SelectedDate_1
    {
        get => this.selectedDate_1 ?? DateTime.Today;
        set
        {
            this.selectedDate_1 = value ?? DateTime.Today;
            Func<Task> f = async () =>
            {
                await this.ProgressBarOpen();
                if (this.SendTupleToParent.HasDelegate)
                    await this.SendTupleToParent.InvokeAsync(this.SelectedDataToParent);
                await this.ProgressBarClose();
            };
            f();
        }
    }

    // Выбранная дата 2
    private DateTime? selectedDate_2;
    private DateTime? SelectedDate_2
    {
        get => this.selectedDate_2 ?? DateTime.Today;
        set
        {
            this.selectedDate_2 = value ?? DateTime.Today;
            Func<Task> f = async () =>
            {
                await this.ProgressBarOpen();
                if (this.SendTupleToParent.HasDelegate)
                    await this.SendTupleToParent.InvokeAsync(this.SelectedDataToParent);
                await this.ProgressBarClose();
            };
            f();
        }
    }
    // Переопределенные события жизненного цикла компонента
    #region
    /// <summary>
    /// Метод задает параметры, предоставляемые родительским элементом компонента в дереве отрисовки или из параметров маршрута.
    /// </summary>
    /// <param name="parameters">Параметры, предоставляемые родительским элементом компонента в дереве отрисовки или из параметров маршрута</param>
    /// <returns></returns>
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<DateTime?>(nameof(this.DateTimeDefault_1), out var valueDateTimeDefault_1))
        {
            if (valueDateTimeDefault_1 == null)
            {
                this.DateTimeDefault_1 = DateTime.MinValue;
            }
        }
        if (parameters.TryGetValue<DateTime?>(nameof(this.DateTimeDefault_2), out var valueDateTimeDefault_2))
        {
            if (valueDateTimeDefault_2 == null)
            {
                this.DateTimeDefault_2 = DateTime.MaxValue;
            }
        }
        if (parameters.TryGetValue<string>(nameof(this.LabelFor), out var valueLabelFor))
        {
            if (string.IsNullOrEmpty(valueLabelFor))
            {
                this.LabelFor = "Дата";
            }
        }

        await base.SetParametersAsync(parameters);
    }

    /// <summary>
    /// Асинхронный метод срабатывает при первоначальной отрисовке компонента
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.InitMembers();
        this.InitCollections();
        this.IsRender = true;
    }
    #endregion

    #region
    /// <summary>
    /// 
    /// </summary>
    private void InitCollections()
    {
        this.LogicOperatorsList = Enum.GetValues(typeof(LogicOperators))?.Cast<LogicOperators>()?.ToList() ?? new();
        this.ComparisonOperatorsList = Enum.GetValues(typeof(ComparisonOperators))?.Cast<ComparisonOperators>()?.ToList() ?? new();

    }

    /// <summary>
    /// 
    /// </summary>
    private void InitMembers()
    {
        this.IsShowSelectSecondDate = false;
        //
        this.selectedDate_1 = this.DateTimeDefault_1;
        this.selectedDate_2 = this.DateTimeDefault_2;
        //
        this.selectedComparisonOperator_1 = this.DefaultComparisonOperators_1;
        this.selectedComparisonOperator_2 = this.DefaultComparisonOperators_2;        
        //
        this.selectedLogicOperator = Enums.Filters.LogicOperators.ДобавитьУсловие;
    }

    new private async Task ProgressBarOpen() => await this.ComponentBaseClassCascadingParameter.ProgressBarOpenAsync();

    new private async Task ProgressBarClose() => await this.ComponentBaseClassCascadingParameter.ProgressBarCloseAsync();
    #endregion
}
