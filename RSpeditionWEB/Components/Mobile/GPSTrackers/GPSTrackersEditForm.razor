@inject IApies api
@inherits EditFormBase<GpsTrackerView>
@inject IMapper mapper


    <CascadingValue Value="@this">
    @if (this.IsRender)
    {
        var label_InvoiceName = this.ModelsType.GetCustomDisplayValues(nameof(this.Model.InvoiceName)).Item1 ?? string.Empty;
        var label_Number = this.ModelsType.GetCustomDisplayValues(nameof(this.Model.Number)).Item1 ?? string.Empty;
        var label_Imei = this.ModelsType.GetCustomDisplayValues(nameof(this.Model.Imei)).Item1 ?? string.Empty;
        var label_ModelName = this.ModelsType.GetCustomDisplayValues(nameof(this.Model.ModelName)).Item1 ?? string.Empty;
        var label_Cost = this.ModelsType.GetCustomDisplayValues(nameof(this.Model.Cost)).Item1 ?? string.Empty;
        var current_invoice = this.GPSTrackersFiltersCascadingVal?.GpsTrackerCascadingParameter?.Invoices?.FirstOrDefault(_ => _.Fguid == this.Model.FkInvoiceGuid) ?? null;
        var placeholder_invoice = current_invoice?.ToString() ?? "Приходная накладная";

        <div class="form_flex">
            <div>
                <Button LabelForButton="@placeholder_invoice"
                        IsActive="@this.IsRender"
                        Width="50%"
                        TitleIfIsNonActive="Подождите, идет загрузка"
                        TitleIfIsActive="Кликните для просмотра / редактирования накладной"
                        EventCallbackToParent="@(() => { this.Title = $"Приходная накладная на GPS-трекеры";
                                                         this.InitGroupInvoiceModel();
                                                         this.IsRender_Invoice = true;})" />
            </div>
            <EditForm EditContext=@this.EditContext>
                <DataAnnotationsValidator />
                @*1-я строка*@
                    <div class="flexRow">
                        <div class="flexColumn">
                        @{
                            GpstrackerModelView mod = new();
                            var type_mod = mod.GetType();
                            var props_mod = new List<PropertyInfo> { type_mod.GetProperty(nameof(mod.ModelName)) };
                            var textProp_mod = type_mod.GetProperty(nameof(mod.ModelName));
                            var temp_mod = type_mod.GetCustomDisplayValues(nameof(mod.ModelName));
                            var labelForSearch_mod = temp_mod.Item1 ?? string.Empty;
                            var current_mod = this.GPSTrackersFiltersCascadingVal?.GpsTrackerCascadingParameter?.Models?.FirstOrDefault(_ => _.Id == this.Model.FkTrackerModelId) ?? null;
                            var initPar_mod = current_mod == null ? null : new List<GpstrackerModelView> { current_mod };
                            var placeholder_mod = this.IsCreate ? temp_mod.Item2 ?? string.Empty : current_mod?.ModelName ?? temp_mod.Item1;
                        }
                        <div>
                            <label_small_black>@label_ModelName</label_small_black>
                        </div>
                        <div>
                            <SearchSelectTItems Items="@(this.GPSTrackersFiltersCascadingVal?.GpsTrackerCascadingParameter?.Models?.OrderBy(_ => _.ModelName)?.ToList() ?? new())"
                                                T="@GpstrackerModelView"
                                                KeyPropInfo="@(type_mod.GetProperty(nameof(mod.Id)))"
                                                MaxSizeSelect="4"
                                                InitParameters="@initPar_mod"
                                                LabelForSearch="@labelForSearch_mod"
                                                Placeholder="@placeholder_mod"
                                                IsMultiple="@false"
                                                PropertiesInfoForSearch="@props_mod"
                                                TextProperty="@textProp_mod"
                                                SendToParentFoundAndSelectedItems="@((List<GpstrackerModelView> selectedItems)
                                                                                                 => {
                                                                                                    if(selectedItems != null && selectedItems?.Count > 0)
                                                                                                        this.Model.FkTrackerModelId = selectedItems?.FirstOrDefault()?.Id ?? null;
                                                                                                    else
                                                                                                        this.Model.FkTrackerModelId = null;
                                                                                                })" />
                        </div>
                        </div>
                        <div class="flexColumnLast">
                            <div>
                                <label_small_black>@label_Cost</label_small_black>
                            </div>
                            <div>
                                <InputNumber @bind-Value="this.Model.Cost"
                                         @oninput="@((ChangeEventArgs arg) => {this.Model.Cost = Decimal.TryParse(arg.Value?.ToString() ?? string.Empty, out var val) ? val: null; })" />
                            </div>
                        </div>
                    </div>
                <div class="validation-message">
                    @this.GetPropsValidMessage(nameof(this.Model.ModelName))
                </div>
                <div class="validation-message">
                    @this.GetPropsValidMessage(nameof(this.Model.Cost))
                </div>
                @*2-я строка*@
                <div class="flexRowCenterColumn">
                    <div class="flexColumn">
                            <div>
                                <label_small_black>@label_Number</label_small_black>
                            </div>
                            <div>
                                <InputText @bind-Value="this.Model.Number"
                                           @oninput="@((ChangeEventArgs arg) => {this.Model.Number = arg.Value?.ToString() ?? string.Empty; })" />
                            </div>
                        </div>
                    <div class="flexColumnLast">
                                    <div>
                                        <label_small_black>@label_Imei</label_small_black>
                                    </div>
                                    <div>
                                        <InputText @bind-Value="this.Model.Imei"
                                                   @oninput="@((ChangeEventArgs arg) => {this.Model.Imei = arg.Value?.ToString() ?? string.Empty; })" />
                                    </div>
                                </div>
                </div>
                <div class="validation-message">
                    @this.GetPropsValidMessage(nameof(this.Model.Number))
                </div>
                <div class="validation-message">
                    @this.GetPropsValidMessage(nameof(this.Model.Imei))
                </div>
                <br />
                    <div>
                        <ButtonDouble EventCallbackToParent="@(async () => { await this.ProgressBarOpenAsync();
                                                                             await this.StartOperation(); 
                                                                             await this.ProgressBarCloseAsync(); })"
                                      EventCallbackToParentReset="@(async () => { await this.MedelsInitialization(); })"
                                      LabelForButton="Сохранить"
                                      LabelForButtonReset="Отмена"
                                      IsActive="@(this.IsModelValid)"
                                      TitleIfIsNonActive="Сохранение изменений возможно, если они валидны"
                                      TitleIfIsActive="Кликните, чтобы сохранить изменения"
                                      TitleReset="Кликните, чтобы отменить внесенные изменения">
                        </ButtonDouble>
                    </div>
            </EditForm>
        </div>

        if (this.IsRender_Invoice)
        {
            <ModalWindowWithEventCallback Title="Редактирование приходной накладной на gps-трекеры"
                                          InvokeParentHandlerwithUpdParent="@(async(object addedItem) => { this.IsRender_Invoice = false; })">
                <GPSTrackersEditGroupForm InvokeParentHendlerAfterGroupUpdating="@(async(List<object> items) => { if (this.InvokeParentHendlerAfterGroupUpdating.HasDelegate) 
                                                                                                                       await this.InvokeParentHendlerAfterGroupUpdating.InvokeAsync(items); })"
                                          InvokeParentHendlerCancel="@(async() => { this.IsRender_Invoice = false; })"
                                          TItemFromParent="@this.GpstrackerInvoiceGroupModel" />
            </ModalWindowWithEventCallback>
        }
    }
    else
    {
        <ProgressBar />
    }

    @if (this.ShowMessage)
    {
        <ModalWindowWithEventCallback Title="@this.Title"
                                  InvokeParentHandlerwithUpdParent="@(async () => { 
                                                                                        if(this.IsCreate)
                                                                                        {
                                                                                            if (this.ShouldUpdateParent && this.InvokeParentHendlerAfterCreating.HasDelegate)
                                                                                                await this.InvokeParentHendlerAfterCreating.InvokeAsync(this.Model);
                                                                                            else if (this.InvokeParentHendlerCancel.HasDelegate)
                                                                                                await this.InvokeParentHendlerCancel.InvokeAsync();
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if (this.ShouldUpdateParent && this.InvokeParentHendlerAfterUpd.HasDelegate)
                                                                                                await this.InvokeParentHendlerAfterUpd.InvokeAsync(this.Model);
                                                                                            else if (this.InvokeParentHendlerCancel.HasDelegate)
                                                                                                await this.InvokeParentHendlerCancel.InvokeAsync();
                                                                                        }
                                                                                  })">
            <ResultOperation Devider="'!'"
                         ResList="null"
                         ResMessage="@this.Message">
            </ResultOperation>
        </ModalWindowWithEventCallback>
    }

     <div id="@this.IdForProgressBar" style="display: none;">
         <ProgressBar />
     </div>
</CascadingValue>



@code {
    [CascadingParameter]
    public GPSTrackersFilters GPSTrackersFiltersCascadingVal { get; set; }

    private GpstrackerInvoiceGroupModel GpstrackerInvoiceGroupModel { get; set; }

    private bool IsRender_Invoice { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.ReturnUrl = this.GPSTrackersFiltersCascadingVal?.ReturnUrl ?? "/";

        if (this.IsCreate)
            this.Model.Location = 1;

        this.IsRender = true;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        this.TItemFromParent = this.GPSTrackersFiltersCascadingVal?.ItemSelected ?? null;
    }

    public override async Task StartOperation()
    {
        this.Message = string.Empty;

        if (this.IsModelValid)
        {
            var putPostModel = this.mapper?.Map<GpsTrackerView>(this.Model);

            if (this.IsCreate)
                this.OperationsResult = await this.api?.MobileApi?.PostGpsTrackers(new List<GpsTrackerView> { putPostModel }, this.Token);
            else
                this.OperationsResult = await this.api?.MobileApi?.PutGpsTrackers(putPostModel, this.Token);

            await this.ProccessingResponse();
        }
        else
        {
            this.Title = "Предупреждение";
            this.Message = string.Concat("Сохранить изменения невозможно, пока введенные данные не будут валидны !", this.ValidErrors);
        }

        this.RenderMessage();
    }

    public override async Task ProccessingResponse()
    {
        if (this.IsCreate)
        {
            if (this.OperationsResult == null)
            {
                this.Message = $"{this.OperationsResult?.Result ?? "Операция закончилась с ошибкой ! Ошибка на уровне сервера !"}";
            }
            else
            {
                this.Message = $"{this.OperationsResult?.Result ?? "Операция успешно завершена ! Изменения были зафиксированы !"}";
                this.ShouldUpdateParent = true;
            }

            this.Title = "Результат добавления gps-трекера";
        }
        else
        {
            var resUpd = (this.OperationsResult as ResponseSingleAction<GpsTrackerView>)?.Item ?? null;

            if (resUpd == null || resUpd.Id <= 0)
            {
                this.Message = "Операция закончилась с ошибкой ! Ошибка на уровне сервера !" + (this.OperationsResult?.Result ?? string.Empty);
                this.Title = "Предупреждение";
            }
            else
            {
                this.ShouldUpdateParent = true;
                this.Message = string.IsNullOrEmpty(this.OperationsResult?.Result ?? string.Empty)
                               ? "Операция успешно завершена ! Изменения были зафиксированы !"
                               : this.OperationsResult?.Result ?? string.Empty
                               ;
            }

            this.Title = "Результат редактирования gps-трекера";
        }
    }

    private void InitGroupInvoiceModel()
    {
        this.GpstrackerInvoiceGroupModel = new();
        this.GpstrackerInvoiceGroupModel.Invoice = this.GPSTrackersFiltersCascadingVal?.GpsTrackerCascadingParameter?.Invoices?.FirstOrDefault(_ => _.Fguid == (this.Model?.FkInvoiceGuid ?? default));
        var gps = this.GPSTrackersFiltersCascadingVal?.GpsTrackerCascadingParameter?.GpsTrackers?.Where(_ => _.FkInvoiceGuid == (this.GpstrackerInvoiceGroupModel?.Invoice?.Fguid ?? default))?.ToList() ?? new();
        var gpsGuid = new List<GpsTracker_View_GUID>();
        gps?.ForEach(_ => gpsGuid?.Add(_.MapTo_GpsTrackerViewGUID()));
        this.GpstrackerInvoiceGroupModel?.Trackers?.AddRange(gpsGuid);
    }
}
