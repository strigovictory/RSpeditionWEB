@*@page "/SimCards"
@page "/SimCards/{ActiveTabNum}"
*@
@attribute [Authorize]
@inject IApies api
@inject Serilog.ILogger logger
@inherits ScaffoldJCMainBase

<CascadingValue Value="@this">
    <button class="tablink" id="defaultOpen" @ref="@this.TabsRef0" @onclick="@(async() => {await this.TabClickHandler(0, nameof(SimCardsFilters), DotNetObjectReference.Create(ChildElemRef0), this.TabsRef0);})">@this.LabelsForTabs?.ElementAt(0)</button>
    <button class="tablink" @ref="@this.TabsRef1" @onclick="@(async() => {await this.TabClickHandler(1, nameof(SimCardsCharts), DotNetObjectReference.Create(ChildElemRef1), this.TabsRef1);})">@this.LabelsForTabs?.ElementAt(1)</button>

    <div id="@(nameof(SimCardsFilters))" class="tabcontent">
        <SimCardsFilters @ref="@this.ChildElemRef0" />
    </div>

    <div id="@(nameof(SimCardsCharts))" class="tabcontent">
        <SimCardsCharts @ref="@this.ChildElemRef1" />
    </div>
</CascadingValue>

@code {
    #region
    private SimCardsFilters ChildElemRef0 { get; set; }
    private SimCardsCharts ChildElemRef1 { get; set; }

    public List<SimCardView> SimCardsItems { get; set; } = new();
    public List<GpsTrackerView> GpsTrackers { get; set; } = new();
    public List<TruckResponse> Trucks { get; set; } = new();
    public List<EmployeeView> Employees { get; set; } = new();
    public List<TelephoneView> Telephones { get; set; } = new();
    public List<DivisionResponse> Divisions { get; set; } = new();
    #endregion

    #region
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.ReturnUrl = "/SimCards";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await this.js.InvokeVoidAsync("defaultOpenPage");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task InitializeTabs() => await Task.FromResult(this.LabelsForTabs = new List<string> { "Sim-карты", "Статистика" });

    public async Task InitSimCards() => this.SimCardsItems = (await this.api?.MobileApi?.GetSimCards(this.Token)) ?? new();
    private async Task InitDivisions() => this.Divisions = (await this.api?.DivisionApi?.GetDivisions(this.Token)) ?? new();
    private async Task InitTelephones() => this.Telephones = (await this.api?.MobileApi?.GetTelephones(this.Token)) ?? new();
    private async Task InitGpstrackers() => this.GpsTrackers = (await this.api?.MobileApi?.GetGpsTrackers(this.Token)) ?? new();
    private async Task InitTrucks() => this.Trucks = (await this.api?.TruckApi?.GetTrucks(this.Token)) ?? new();
    private async Task InitEmployees() => this.Employees = (await this.api?.PersonApi?.GetEmployees(this.Token)) ?? new();

    public override async Task UpdateMainCollections()
        => await this.InitSimCards();

    public override async Task UpdateSecondCollections()
    {
        ConcurrentBag<Task> tasks = new();
        tasks.Add(Task.Run(async () => await this.InitDivisions()));
        tasks.Add(Task.Run(async () => await this.InitTelephones()));
        tasks.Add(Task.Run(async () => await this.InitGpstrackers()));
        tasks.Add(Task.Run(async () => await this.InitTrucks()));
        tasks.Add(Task.Run(async () => await this.InitEmployees()));

        await Task.WhenAll(tasks);
    }
    #endregion
}
