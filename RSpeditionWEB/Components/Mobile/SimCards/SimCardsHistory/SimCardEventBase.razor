@inject IApies api
@inherits EventsEditFormBase<SimCardsOperationView, SimCardView>

@*Компонент, в котором скоонцентрировано все, что связано с валидацией модели SimCardsOperation_View*@


@code {
    protected override DateTime? startPrevious => this.TEventPrevious?.OperationDate.Date ?? null;
    protected override DateTime? finishNext => this.TEventNext?.OperationFinishDate?.Date ?? null;
    protected override DateTime? startLast => this.TEventLast?.OperationDate.Date ?? null;
    protected override DateTime? startNext => this.TEventNext?.OperationDate.Date ?? default;

    protected override bool IsModelValid => this.ValidateModel().isValid
                                            && string.IsNullOrEmpty(this.ValidationMessage_TypeEvent)
                                            && string.IsNullOrEmpty(this.ValidationMessage_Truck)
                                            && string.IsNullOrEmpty(this.ValidationMessage_Gps)
                                            && string.IsNullOrEmpty(this.ValidationMessage_Empl)
                                            && string.IsNullOrEmpty(this.ValidationMessageFinishDate)
                                            && string.IsNullOrEmpty(this.ValidationMessageStartDate)
                                            && string.IsNullOrEmpty(this.ValidationMessage_Comment);

    // Утверждения для валидации дат
    private Func<bool, DateTime?, DateTime?, bool> StartEventDate_Later_ReceiveCardDate
    = delegate (bool isFirstEvent, DateTime? startEvent, DateTime? reciveCard) { if (startEvent != null && reciveCard != null && !isFirstEvent) return startEvent?.Date >= reciveCard?.Date; else return true; };

    private Func<bool, DateTime?, DateTime?, bool> DiscardCardDate_Later_StartEventDate
    = delegate (bool isLastEvent, DateTime? discardCard, DateTime? startEvent) { if (startEvent != null && discardCard != null && !isLastEvent) return discardCard?.Date >= startEvent?.Date; else return true; };

    private Func<bool, DateTime?, DateTime?, bool> DiscardCardDate_Later_FinishEventDate
    = delegate (bool isLastEvent, DateTime? discardCard, DateTime? finishEvent) { if (finishEvent != null && discardCard != null && !isLastEvent) return discardCard?.Date >= finishEvent?.Date; else return true; };

    // Утверждения для валидации остальных полей
    private Predicate<int?> IdRequired = (int? id) => id != null && id > 0;

    protected string ValidationMessage_TypeEvent => this.CheckProp_EventType(this.Model?.OperationType ?? null);

    protected string ValidationMessage_Truck => this.CheckProp_Id(this.Model?.TruckId ?? null, EventType.Тягач);

    protected string ValidationMessage_Gps => this.CheckProp_Id(this.Model?.TrackerId ?? null, EventType.Трекер);

    protected string ValidationMessage_Empl => this.CheckProp_Id(this.Model?.EmployeeId ?? null, EventType.Сотрудник);

    protected string ValidationMessage_Comment => this.GetValidationMessageForProp(this.Model, nameof(this.Model.Comment)) ?? string.Empty;

    /// <summary>
    /// Метод для преверки валидности дат по отношению друг к другу - при редактировании старого события
    /// </summary>
    protected new void CheckProp_Dates()
    {
        var receiveCard = this.EventSource?.ReceiveDate ?? null;
        var discardCard = this.EventSource?.DiscardDate ?? null;

        base.CheckPropDates();
        // - 
        if (!this.StartEventDate_Later_ReceiveCardDate(this.isFirstEvent, this.EventsStartDate, receiveCard))
            this.ValidationMessageStartDate += " Дата начала события не может быть раньше даты прихода sim-карты !";
        // -
        if (!this.DiscardCardDate_Later_StartEventDate(this.isLastEvent, discardCard, this.EventsStartDate))
            this.ValidationMessageStartDate += " Дата начала события не может быть позже даты списания топливной карты !";
        // -
        if (!this.DiscardCardDate_Later_FinishEventDate(this.isLastEvent, discardCard, this.EventsFinishDate))
            this.ValidationMessageStartDate += " Дата окончания события не может быть позже даты списания топливной карты !";
    }

    private string CheckProp_EventType(int? eventTypeId)
    {
        var res = string.Empty;

        if (eventTypeId == null || eventTypeId == 0 || eventTypeId > 6)
            res = $"Поле «{this.ModelsType?.GetCustomDisplayValues(nameof(this.Model.OperationTypeName)).Item1 ?? string.Empty}» обязательно для заполнения";
        else
            res = string.Empty;

        return res;
    }

    protected string CheckProp_Id(int? id, EventType eventType)
    {
        var res = string.Empty;

        if (OperationTypeHelper.OperationTypesReversed_SimCard[eventType] == this.Model?.OperationType)
        {
            if (this.Model?.OperationType == OperationTypeHelper.OperationTypesReversed_SimCard[EventType.Тягач])
            {
                if (!this.IdRequired(id))
                    res = $"Для типа события «ТЯГАЧ» поле «{this.ModelsType?.GetCustomDisplayValues(nameof(this.Model.TruckName)).Item1 ?? string.Empty}» обязательно для заполнения !";
                else
                    res = string.Empty;
            }
            else if (this.Model?.OperationType == OperationTypeHelper.OperationTypesReversed_SimCard[EventType.Трекер])
            {
                if (!this.IdRequired(id))
                    res = $"Для типа события «ТРЕКЕР» поле «{this.ModelsType?.GetCustomDisplayValues(nameof(this.Model.TrackerName)).Item1 ?? string.Empty}» обязательно для заполнения !";
                else
                    res = string.Empty;
            }
            else if (this.Model?.OperationType == OperationTypeHelper.OperationTypesReversed_SimCard[EventType.Сотрудник])
            {
                if (!this.IdRequired(id))
                    res = $"Для типа события «СОТРУДНИК» поле «{this.ModelsType?.GetCustomDisplayValues(nameof(this.Model.EmployeeName)).Item1 ?? string.Empty}» обязательно для заполнения !";
                else
                    res = string.Empty;
            }
            else
            {
                res = string.Empty;
            }
        }

        return res;
    }
}
