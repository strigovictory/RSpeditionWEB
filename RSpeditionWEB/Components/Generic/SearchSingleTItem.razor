@inherits ComponentBaseClass
<div>
    @{
        var img_dropdown = ShowSearchResult ? "css/open-iconic/icon/up_black.png" : "css/open-iconic/icon/down_black.png";
        var placeHolderValue = SelectedIIdItem != null ? TextProperty?.GetValue(SelectedIIdItem)?.ToString() ?? "Поиск" : "Поиск";
    }

    @if (this.ShowLabel)
    {
        <label_small_black>
            @(this.LabelForSearch ?? "Поиск")
        </label_small_black>
    }
    <div class="search">
        <input type="search"
               placeholder="@placeHolderValue"
               @bind-value="this.SearchString"
               @bind-value:event="oninput"
               @onclick="@(() => { if(!ShowSearchResult) ShowSearchResult = true; })" />
        <button type="button"
                class="button"
                @onclick="@(() => OnShow())">
            <img src="@img_dropdown" />
        </button>
    </div>
    @if (ShowSearchResult)
    {
        <div>
            <select size="@this.SizeSelect"
                    class="search_select"
                    @bind="@this.IdSelectedItem">
                @if (this.SearchedIIdItems != null
               && (this.SearchedIIdItems?.Count ?? 0) > 0)
                {
                    @if (this.IdSelectedItem == -1)
                    {
                        <option value="-1" disabled selected>
                            Ничего не выбрано
                        </option>
                    }
                    @for (var i = 0; i < (this.SearchedIIdItems?.Count ?? 0); i++)
                    {
                        // Получение наименования для отображения
                        var obj = this.SearchedIIdItems.ElementAt(i);
                        string label = obj != null ? this.TextProperty?.GetValue(obj)?.ToString() ?? string.Empty : string.Empty;

                        if (this.IdSelectedItem.Equals(this.SearchedIIdItems.ElementAt(i).Id))
                        {
                            <option value="@this.SearchedIIdItems.ElementAt(i).Id" selected>
                                @label
                            </option>
                        }
                        else
                        {
                            <option value="@this.SearchedIIdItems.ElementAt(i).Id">
                                @label
                            </option>
                        }
                    }
                }
                else
                {
                    <option disabled selected>@this.Placeholder</option>
                }
            </select>
        </div>
    }
</div>

@code {
    // Члены компонента
    #region
    // Делегат обратного вызова для передачи в родительский компонент найденного и выбранного пользователем на основе строки поискового запроса экземпляров типа IId
    [Parameter]
    public EventCallback<IId> SendToParentSelectedIIdItem { get; set; }

    // Коллекция свойств в рамках которых будет осуществляться поиск вхождения строки SearchString
    [Parameter]
    public List<PropertyInfo> PropertiesInfoForSearch { get; set; }

    // Свойство для отображения в select-option
    [Parameter]
    public PropertyInfo TextProperty { get; set; }

    // Максимальное значение атрибута Size тега Select
    [Parameter]
    public int MaxSizeSelect { get; set; }

    // Минимальное значение атрибута Size тега Select
    [Parameter]
    public int MinSizeSelect { get; set; }

    // Коллекция экземпляров типа IId, в рамках которой будет осуществляться поиск
    [Parameter]
    public List<IId> IIdItems { get; set; } = new();

    [Parameter]
    public string LabelForSearch { get; set; }

    [Parameter]
    public string Placeholder { get; set; }

    [Parameter]
    public IId IIdOuterInitParameter { get; set; }

    // Входной параметр, показывающий, необходимо или нет отображать наименование свойства перед
    [Parameter]
    public bool ShowLabel { get; set; }

    // Текущее значение атрибута Size тега Select
    private int SizeSelect { get; set; }

    [Parameter]
    public bool ShowSearchResult { get; set; } = false;

    [Parameter]
    public bool OnShowEnable { get; set; } = false;

    public void OnShow() => this.ShowSearchResult = this.ShowSearchResult ? false : true;

    // Строка запроса из поискового поля
    private string searchString = string.Empty;
    public string SearchString
    {
        get => this.searchString;
        set
        {
            this.searchString = value;
            Func<Task> f = async () => await this.SearchStart();
            f();
        }
    }

    // Коллекция экземпляров типа IId, которые были отфильтрованы в соответствии со строкой поиска
    private List<IId> SearchedIIdItems { get; set; }

    // Экземпляр типа IId, который был отфильтрован и выбран пользователем
    private IId SelectedIIdItem { get; set; }

    // Коллекция идентификаторов выбранных пользователем экземпляров IId
    private int idSelectedItem { get; set; }
    private int IdSelectedItem
    {
        get
        {
            return this.idSelectedItem;
        }
        set
        {
            this.idSelectedItem = value;
            Func<Task> f = async () => await this.ReactOnChoice(value);
            f();
        }
    }
    #endregion

    // Методы жизненного цикла компонента
    #region
    /// <summary>
    /// Асинхронный метод срабатывает при первоначальной отрисовке компонента
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        this.FirstInitializeCollection();
        this.ChangeSizeSelect();
    }

    /// <summary>
    /// Асинхронный метод для инициализации коллекций компонента
    /// </summary>
    /// <returns></returns>
    protected void FirstInitializeCollection()
    {
        this.SearchedIIdItems = new();
        this.SearchedIIdItems.AddRange(this.IIdItems);
        this.IdSelectedItem = this.IIdOuterInitParameter?.Id ?? -1;
        this.SelectedIIdItem = this.IIdItems?.FirstOrDefault(_ => _.Id == this.IdSelectedItem);
    }
    #endregion

    // Основные методы компонента
    #region
    /// <summary>
    /// Метод для запуска сервиса по поиску организации
    /// </summary>
    private async Task SearchStart()
    {
        // Вызов поискового сервиса
        if (string.IsNullOrEmpty(this.SearchString))
        {
            this.SearchedIIdItems = new();
            this.FirstInitializeCollection();
        }
        else
            this.SearchedIIdItems = this.IIdItems.SearchedIIdItems(this.PropertiesInfoForSearch, this.SearchString) ?? new();

        this.IdSelectedItem = -1; 
    }

    /// <summary>
    /// Метод динамически измененяет значение атрибута size тега Select в зависимости от кол-ва найденных совпадений
    /// </summary>
    private void ChangeSizeSelect()
    {
        var num = this.SearchedIIdItems?.Count ?? 0;

        if (num >= 0 && num < this.MaxSizeSelect)
            this.SizeSelect = num + 1;
        else if (num > this.MaxSizeSelect)
            this.SizeSelect = this.MaxSizeSelect;
        else if (num == 0)
            this.SizeSelect = this.MinSizeSelect;
    }

    /// <summary>
    /// Метод для передачи в родительский компонент коллекции выбранных (checked) экземпляров
    /// </summary>
    private async Task ReactOnChoice(int item)
    {
        if (item > 0)
        {
            this.SelectedIIdItem = this.IIdItems?.FirstOrDefault(_ => _.Id == item);
            ShowSearchResult = false;
            searchString = string.Empty;
        }
        else
            this.SelectedIIdItem = null;

        await this.SendToParentSelectedIIdItem.InvokeAsync(this.SelectedIIdItem);
        this.ChangeSizeSelect();
        this.StateHasChanged();
    }
    #endregion
}
