@using RSpeditionWEB.Models.RequestModels
@using RSpeditionWEB.Validation
@inherits FuelTranzBase<FuelTranzGroupModel>
@inject IFuelApies api

<CascadingValue Value="this">
    @if (this.IsRender)
    {
        var label_fuelProvider = this.ModelsType.GetCustomDisplayValues(nameof(this.Model.FuelProviderId)).Item1 ?? string.Empty;
        var label_division = this.ModelsType.GetCustomDisplayValues(nameof(this.Model.DivisionId)).Item1 ?? string.Empty;
        <div class="form_flex">
            <EditForm Model="@this.Model" OnValidSubmit="@(async () => { await this.StartOperation(); })">
                <DataAnnotationsValidator />
                @*1-я строка*@
                <div class="flexRowWithInnerBlocks">
                    <div class="boxShadowInner"
                         title="Обязательные для заполнения поля">
                        <div class="flexColumn">
                            <div>
                                <label_small_black>@label_fuelProvider</label_small_black>
                            </div>
                            <div>
                                <SearchSingleTItem IIdItems="@(this.FuelTranzJournalCascadingVal?.FuelCardsCascadingParameter?.FuelProviders?.OrderBy(_ => _.Name)?.Cast<IId>()?.ToList() ?? new())"
                                                   PropertiesInfoForSearch="@this.AttrTFuelCardType.props"
                                                   ShowLabel="false"
                                                   TextProperty="@this.AttrTFuelCardType.textProp"
                                                   LabelForSearch="@this.AttrTFuelCardType.labelForSearch"
                                                   Placeholder="@this.AttrTFuelCardType.placeholder"
                                                   MinSizeSelect="2"
                                                   MaxSizeSelect="7"
                                                   IIdOuterInitParameter="null"
                                                   SendToParentSelectedIIdItem="@((IId item) => { if(item is FuelProviderResponse val) 
                                                                                                       this.Model.FuelProviderId = val.Id;
                                                                                                   else 
                                                                                                       this.Model.FuelProviderId = 0;
                                                                                                   this.StartObjItemsChangedEvent(); })" />
                            </div>
                            <div class="validation-message">
                                @this.GetValidationMessageForProp(this.Model, nameof(this.Model.FuelProviderId))
                            </div>
                        </div>
                        <div class="flexColumn">
                            <div>
                                <label_small_black>@label_division</label_small_black>
                            </div>
                            <div>
                                <SearchSingleTItem IIdItems="@(this.FuelTranzJournalCascadingVal?.FuelCardsCascadingParameter?.Divisions?.Where(_ => _.IsMainDivision && !_.IsOnlyForwarding)?.OrderBy(_ => _.Name)?.Cast<IId>()?.ToList() ?? new())"
                                                   PropertiesInfoForSearch="@this.AttrTDivision.props"
                                                   ShowLabel="false"
                                                   TextProperty="@this.AttrTDivision.textProp"
                                                   LabelForSearch="@this.AttrTDivision.labelForSearch"
                                                   Placeholder="@this.AttrTDivision.placeholder"
                                                   MinSizeSelect="2"
                                                   MaxSizeSelect="7"
                                                   IIdOuterInitParameter="null"
                                                   SendToParentSelectedIIdItem="@((IId item) => { if(item is DivisionResponse val)
                                                                                                       this.Model.DivisionId = val.Id;
                                                                                                   else
                                                                                                       this.Model.DivisionId = 0;
                                                                                                   this.StartObjItemsChangedEvent(); })" />
                            </div>
                            <div class="validation-message">
                                @this.GetValidationMessageForProp(this.Model, nameof(this.Model.DivisionId))
                            </div>
                        </div>
                        <div class="flexColumn">
                            @{
                                var imgOptPar = this.IsOptionalParametersRender ? "/css/open-iconic/icon/minus.png" : "/css/open-iconic/icon/plus.png";
                                var titleOptPar = this.IsOptionalParametersRender ? "Скрыть необязательные параметры и отменить предустановку значений для вновь добавляемых транзакций" : "Установить значения необязательных параметров";
                            }
                        </div>
                    </div>
                    <div class="flexColumnMargin0">
                        <button type="button"
                                class="btnTransparent"
                                title="@titleOptPar"
                                @onclick="@(() => {this.IsOptionalParametersRender = this.IsOptionalParametersRender ? false : true; 
                                                   if(!this.IsOptionalParametersRender)
                                                   {
                                                       this.Model.CountryId = null;
                                                       this.Model.CurrencyId = null;
                                                       this.Model.FuelTypeId = (this.FuelTypesOnly?.FirstOrDefault(_ => _.Name.ToLower().Equals("топливо")) ?? null)?.Id ?? null;
                                                   }
                                })">
                            <img src="@imgOptPar" />
                        </button>
                    </div>
                    <div class="boxShadowInner"
                         title="Поля, доступные для переопределения внутри таблицы">
                        <div class="flexColumn"
                             style="@this.StyleForOptionalParameters">
                            <div>
                                <label_small_black>@Label_CountryId</label_small_black>
                            </div>
                            <div>
                                <SearchSingleTItem IIdItems="@(this.FuelTranzJournalCascadingVal?.FuelCardsCascadingParameter?.Countries?.OrderBy(_ => _.Name)?.Cast<IId>()?.ToList() ?? new())"
                                               PropertiesInfoForSearch="@this.AttrCountry.props"
                                               ShowLabel="false"
                                               TextProperty="@this.AttrCountry.textProp"
                                               LabelForSearch="@this.AttrCountry.labelForSearch"
                                               Placeholder="@this.AttrCountry.placeholder"
                                               MinSizeSelect="2"
                                               MaxSizeSelect="7"
                                               IIdOuterInitParameter="null"
                                               SendToParentSelectedIIdItem="@((IId item) => { if(item is CountryResponse val)
                                                                                                           this.Model.CountryId = val.Id;
                                                                                                       else
                                                                                                           this.Model.CountryId = null; })" />
                            </div>
                            <div class="validation-message">
                                @this.GetValidationMessageForProp(this.Model, nameof(this.Model.CountryId))
                            </div>
                        </div>
                        <div class="flexColumn"
                             style="@this.StyleForOptionalParameters">
                                <div>
                                    <label_small_black>@Label_Cost</label_small_black>
                                </div>
                                <div>
                                <InputNumber TValue="@(decimal?)"
                                             class="form-control"
                                             Value="@this.Model.Cost"
                                             ValueExpression="@(() => Model.Cost)"
                                             ValueChanged="@((decimal? val) => { this.Model.Cost = val.HasValue ? val.Value.RoundingDecimal(3) : null; })" />
                                </div>
                                <div class="validation-message">
                                    @this.GetValidationMessageForProp(this.Model, nameof(this.Model.Cost))
                                </div>
                        </div>
                        <div class="flexColumn"
                             style="@this.StyleForOptionalParameters">
                            <div>
                                <label_small_black>@Label_CurrencyId</label_small_black>
                            </div>
                            <div>
                                <SearchSingleTItem IIdItems="@(this.FuelTranzJournalCascadingVal?.FuelCardsCascadingParameter?.Currencies?.OrderBy(_ => _.Name)?.Cast<IId>()?.ToList() ?? new())"
                                               PropertiesInfoForSearch="@this.AttrCurrency.props"
                                               ShowLabel="false"
                                               TextProperty="@this.AttrCurrency.textProp"
                                               LabelForSearch="@this.AttrCurrency.labelForSearch"
                                               Placeholder="@this.AttrCurrency.placeholder"
                                               MinSizeSelect="2"
                                               MaxSizeSelect="7"
                                               IIdOuterInitParameter="null"
                                               SendToParentSelectedIIdItem="@((IId item) => { if(item is CurrencyResponse val)
                                                                                                       this.Model.CurrencyId = val.Id;
                                                                                                   else
                                                                                                       this.Model.CurrencyId = null; })" />
                            </div>
                            <div class="validation-message">
                                @this.GetValidationMessageForProp(this.Model, nameof(this.Model.CurrencyId))
                            </div>
                        </div>
                        <div class="flexColumn"
                             style="@this.StyleForOptionalParameters">
                            <div>
                                <label_small_black>@this.Label_FuelTypeId</label_small_black>
                            </div>
                            <div>
                                <SearchSingleTItem IIdItems="@(this.FuelTypesOnly?.Cast<IId>()?.ToList() ?? new())"
                                               PropertiesInfoForSearch="@this.AttrTRideCostCategory.props"
                                               ShowLabel="false"
                                               TextProperty="@this.AttrTRideCostCategory.textProp"
                                               LabelForSearch="@this.AttrTRideCostCategory.labelForSearch"
                                               Placeholder="@this.AttrTRideCostCategory.placeholder"
                                               MinSizeSelect="2"
                                               MaxSizeSelect="7"
                                               IIdOuterInitParameter="@(this.FuelTypesOnly?.FirstOrDefault(_ => _.Name.ToLower().Equals("топливо")) ?? null)"
                                               SendToParentSelectedIIdItem="@((IId item) => { if(item is FuelTypeResponse val)
                                                                                                   this.Model.FuelTypeId = val.Id;
                                                                                               else
                                                                                                   this.Model.FuelTypeId = 0; })" />
                            </div>
                            <div class="validation-message">
                                @this.GetValidationMessageForProp(this.Model, nameof(this.Model.FuelTypeId))
                            </div>
                        </div>
                    </div>
                </div>
                @*2-я строка - Табличная часть*@
                @if (this.ValidateModel().isValid)
                {
                    <div>
                        <div class="form_label">Информация по каждой транзакции:</div>
                        @*Вложенный компонент с перечнем добавляемых топливных транзакций*@
                        <div class="adapt_table scroll font-journal">
                            <table class="adapt_table_inner" cellpadding="0" cellspacing="0">
                                <thead class="adapt_table_inner_thead">
                                    <tr style="border-top: 2px solid white;">
                                        <th data-label="№">
                                            №
                                        </th>
                                        <th data-label="@this.Label_Day">
                                            @this.Label_Day
                                        </th>
                                        <th data-label="@this.Label_Time">
                                            @this.Label_Time
                                        </th>
                                        <th data-label="@this.Label_CardId">
                                            @this.Label_CardId
                                        </th>
                                        <th data-label="@this.Label_FuelTypeId">
                                            @this.Label_FuelTypeId
                                        </th>
                                        <th data-label="@this.Label_Quantity">
                                            @this.Label_Quantity
                                        </th>
                                        <th data-label="@this.Label_CountryId">
                                            @this.Label_CountryId
                                        </th>
                                        <th data-label="@this.Label_CurrencyId">
                                            @this.Label_CurrencyId
                                        </th>
                                        <th data-label="@this.Label_Cost">
                                            @this.Label_Cost
                                        </th>
                                        <th data-label="@this.Label_TotalCost">
                                            @this.Label_TotalCost
                                        </th>
                                        <th data-label="Удалить">
                                            Удалить
                                        </th>
                                    </tr>
                                </thead>
                                <tbody style="width: 100%;">
                                    @if (this.Model != null
                                      && this.Model?.Tranzactions != null
                                      && this.Model?.Tranzactions?.Count > 0)
                                    {
                                        for (int i = 0; i < this.Model?.Tranzactions?.Count; i++)
                                        {
                                            var tranz = this.Model?.Tranzactions?.ElementAt(i);
                                            var keyId = tranz?.Key ?? string.Empty;
                                            var numrow = i;
                                            numrow++;
                                            <FuelTranzGroupAddChild NumRow="@numrow"
                                                                      @key="keyId"
                                                                      GuideId="@keyId"
                                                                      InvokeParentHandlerDataChanges="@(((string ident, FuelTranz tr) tuple) => { this.Model.Tranzactions[tuple.ident] = tuple.tr; })"
                                                                      InvokeParentHandlerSendChangesRemoveRow="@((string ident) => { this.Model.Tranzactions.Remove(ident); })" />
                                        }
                                    }
                                    <tr style="vertical-align: central;">
                                        <td colspan="11">
                                            <button type="button"
                                                    @onclick="@(() => { var ident = Guid.NewGuid().ToString(); 
                                                                        this.Model.Tranzactions.Add(ident, new FuelTranz()); })"
                                                    class="button_tr_100">
                                                <span><b>+</b> Добавить еще одну транзакцию</span>
                                            </button>
                                        </td>
                                    </tr>
                                </tbody>
                                <tfoot class="adapt_table_inner_tfoot">
                                    <tr style="cursor: text;">
                                        <td data-label="№">
                                        </td>
                                        <td data-label="@this.Label_Day">
                                        </td>
                                        <td data-label="@this.Label_Time">
                                        </td>
                                        <td data-label="@this.Label_CardId">
                                        </td>
                                        <td data-label="@this.Label_FuelTypeId">
                                        </td>
                                        <td data-label="@this.Label_Quantity">
                                            @(this.Model?.Tranzactions?.Select(_ => _.Value.Quantity)?.Sum() ?? 0)
                                        </td>
                                        <td data-label="@this.Label_CountryId">
                                        </td>
                                        <td data-label="@this.Label_CurrencyId">
                                        </td>
                                        <td data-label="@this.Label_Cost">
                                        </td>
                                        <td data-label="@this.Label_TotalCost">
                                            @(String.Format("{0:N2}", Math.Round(this.Model?.Tranzactions?.Select(_ => _.Value.TotalCost ?? 0)?.Sum() ?? 0, 2)))
                                        </td>
                                        <td data-label="Удалить">
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                    var buttonLabel = $"Сохранить {this.Model?.Tranzactions?.Count ?? 0} шт.";
                    var errorTranz = string.Empty;
                    if (this.IsTranzEmpty)
                        errorTranz = $"Для сохранения партии д.б. внесена хотя бы одна транзакция";
                    else
                        errorTranz = string.Empty;
                    <div class="validation-message">
                        @errorTranz
                    </div>
                    <div>
                        <ButtonDouble EventCallbackToParent="@(async () => {await this.ProgressBarOpenAsync();
                                                                            await this.StartOperation();
                                                                            await this.ProgressBarCloseAsync();})"
                                      EventCallbackToParentReset="@(async () => {await this.InvokeParentHendlerCancel.InvokeAsync();})"
                                      LabelForButton="@buttonLabel"
                                      LabelForButtonReset="Отмена"
                                      IsActive="@this.IsModelValid"
                                      TitleIfIsNonActive="Сохранение топливных транзакций возможно, если они валидны"
                                      TitleIfIsActive="Кликните, чтобы сохранить топливные транзакции"
                                      TitleReset="Кликните, чтобы закрыть форму и отменить внесенные изменения"
                                      IsRenderActionButton="@IsUserHasMinimumFuelRole" />
                    </div>
                }
            </EditForm>
        </div>
    }
    else
    {
        <ProgressBarInner TitleProcess="Идет загрузка ..." />
    }
    @if (this.ShowMessage)
    {
        <ModalWindowWithEventCallback Title="@this.Title"
                                      InvokeParentHandlerwithUpdParent="@(async () => { if (this.ShouldUpdateParent && this.InvokeParentHendlerAfterGroupCreating.HasDelegate)
                                                                                            await this.InvokeParentHendlerAfterGroupCreating.InvokeAsync(null);
                                                                                        else if (this.InvokeParentHendlerCancel.HasDelegate)
                                                                                            await this.InvokeParentHendlerCancel.InvokeAsync();
                                                                                        this.ShowMessage = false;})">
            <ResultOperation Devider="'!'"
                             ResList="null"
                             ResMessage="@this.Message" />
            @if ((this.ButtonBaseClassList?.Count ?? 0) > 0)
            {
                <div class="stickyBottomContainer" style="top: 0vh !important;">
                    <ButtonContainer ButtonBaseClassList="@this.ButtonBaseClassList"
                                     WidthForButtonWrapper="100%" />
                </div>
            }

            @if (this.IsRenderSuccessItems)
            {
                <ItemsWithReasonList Items="@(this.GetTupleAdded())"
                                     NameItem="Транзакции, успешно сохраненные в БД"
                                     IsDetailsHide="true" />
            }
            @if (this.IsRenderNotSuccessItems)
            {
                <ItemsWithReasonList Items="@(this.GetTupleNotAdded())"
                                     NameItem="Транзакции, НЕ сохраненные в БД"
                                     IsDetailsHide="true" />
            }
        </ModalWindowWithEventCallback>
    }
    <div id="@this.IdForProgressBar" style="display: none;">
        <ProgressBar />
    </div>
</CascadingValue>

@code {
    private bool IsOptionalParametersRender { get; set; } = false;
    private string StyleForOptionalParameters => this.IsOptionalParametersRender ? "display: block;" : "display: none;";

    [CascadingParameter]
    public FuelTranzJournal FuelTranzJournalCascadingVal { get; set; }

    public List<FuelTypeResponse> FuelTypesOnly
        => this.FuelTranzJournalCascadingVal?
                                             .FuelCardsCascadingParameter?
                                             .FuelCategories?
                                             .Where(_ => (_.Name?.ToLower()?.Contains("топливо") ?? false)
                                                      || (_.Name?.ToLower()?.Contains("adblue") ?? false))?
                                             .OrderBy(_ => _.Name)?
                                             .ToList()
                                             ??
                                             new()
                                             ;

    private bool IsTranzEmpty => this.Model == null ||
                                 this.Model?.Tranzactions == null ||
                                 this.Model?.Tranzactions?.Count == 0 ||
                                 this.Model?.Tranzactions?.Values == null ||
                                 this.Model?.Tranzactions?.Values?.Count == 0;

    private bool IsInnerModelsValid => (this.Model?.Tranzactions?.All(_ => _.Value.CheckModelIsValid().isValid) ?? false);

    protected override bool IsModelValid => this.ValidateModel().isValid 
                                         && !this.IsTranzEmpty 
                                         && this.IsInnerModelsValid;

    private FuelTranz Tranz = new();
    private Type TranzType => this.Tranz?.GetType();
    public string Label_Day => this.TranzType.GetCustomDisplayValues(nameof(this.Tranz.OperationDateDay)).Item1 ?? string.Empty;
    public string Label_Time => this.TranzType.GetCustomDisplayValues(nameof(this.Tranz.OperationDateTimeHour)).Item1 ?? string.Empty;
    public string Label_CardId => this.TranzType.GetCustomDisplayValues(nameof(this.Tranz.CardId)).Item1 ?? string.Empty;
    public string Label_FuelTypeId => this.TranzType.GetCustomDisplayValues(nameof(this.Tranz.FuelTypeId)).Item1 ?? string.Empty;
    public string Label_CountryId => this.TranzType.GetCustomDisplayValues(nameof(this.Tranz.CountryId)).Item1 ?? string.Empty;
    public string Label_CurrencyId => this.TranzType.GetCustomDisplayValues(nameof(this.Tranz.CurrencyId)).Item1 ?? string.Empty;
    public string Label_Quantity => this.TranzType.GetCustomDisplayValues(nameof(this.Tranz.Quantity)).Item1 ?? string.Empty;
    public string Label_Cost => this.TranzType.GetCustomDisplayValues(nameof(this.Tranz.Cost)).Item1 ?? string.Empty;
    public string Label_TotalCost => this.TranzType.GetCustomDisplayValues(nameof(this.Tranz.TotalCost)).Item1 ?? string.Empty;

    private List<FuelCardFullModel> FuelCards_BySomeDivision
        => this.Model.DivisionId > 0 
        ? 
        this.FuelTranzJournalCascadingVal?.FuelCardsCascadingParameter?.Cards?.Where(_ => _.DivisionID == this.Model.DivisionId)?.ToList() ?? new()
        : 
        this.FuelTranzJournalCascadingVal?.FuelCardsCascadingParameter?.Cards ?? new()
        ;

    public List<FuelCardFullModel> FuelCardsBySomeDivisionBySomeProvider 
        => this.Model.FuelProviderId > 0 
        ?
        this.FuelCards_BySomeDivision?.Where(_ => _.ProviderId == this.Model.FuelProviderId)?.ToList() ?? new() 
        : 
        this.FuelCards_BySomeDivision ?? new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.InitAttrValForInput();
        this.Model.FuelTypeId = this.FuelTypesOnly?.FirstOrDefault(_ => _.Name.ToLower().Equals("топливо"))?.Id ?? 0;
        this.InitButtons();
        this.IsRender = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if(!firstRender)
            this.InitButtons();
    }

    protected override void InitButtons()
    {
        this.ButtonBaseClassList = new();
        //
        ButtonBaseClass b0 = new();
        b0.CallbackToParent = (() =>
        {
            this.IsRenderSuccessItems = this.IsRenderSuccessItems ? false : true;
            this.StateHasChanged();
        });
        b0.LabelForButton = "Транзакции, успешно сохраненные в БД";
        b0.IsActive = this.AddedToDBItems?.Count > 0;
        b0.TitleIfIsActive = "Кликните для отображения перечня сохраненных транзакций";
        b0.TitleIfIsNonActive = "Коллекция сохраненных транзакций пустая";
        //
        ButtonBaseClass b1 = new();
        b1.CallbackToParent = (() =>
        {
            this.IsRenderNotSuccessItems = this.IsRenderNotSuccessItems ? false : true;
            this.StateHasChanged();
        });
        b1.LabelForButton = "Транзакции, НЕ сохраненные в БД";
        b1.IsActive = this.NotAddedToDBItems?.Count > 0;
        b1.TitleIfIsActive = "Кликните для отображения перечня не сохраненных транзакций";
        b1.TitleIfIsNonActive = "Коллекция не сохраненных транзакций пустая";
        //
        if (this.AddedToDBItems?.Count > 0)
            this.ButtonBaseClassList.Add(b0);
        if (this.NotAddedToDBItems?.Count > 0)
            this.ButtonBaseClassList.Add(b1);
    }

    public override async Task StartOperation()
    {
        this.Message = string.Empty;
        List<FuelTransactionFullResponse> tranzToSaveInDB = new();

        if (this.IsModelValid)
        {
            tranzToSaveInDB = this.Model.MapFuelTranzGroupModelToSendToDB();

            string errorsValid = string.Empty;
            var isValidItems = true;

            foreach (var item in tranzToSaveInDB)
            {
                var resCheckValid = item.CheckModelIsValid();
                if (!resCheckValid.Item1)
                {
                    errorsValid += resCheckValid.Item2?.ItemsToString("! ");
                    isValidItems = false;
                }
            }

            if (isValidItems)
            {
                if (this.IsCreate)
                    this.OperationsResult = await this.api?.FuelTransactionApi?.PostTransactions(
                        new RequestGroupAction<FuelTransactionResponse>(
                            User, tranzToSaveInDB?.Select(_ => Mapper.Map<FuelTransactionResponse>(_))?.ToList() ?? new()), this.Token);

                await this.ProccessingResponse();
            }
            else
            {
                this.Message = $"Операция не м.б. выполнена, т.к. данные не валидны ! {errorsValid}";
                this.Title = "Предупреждение";
            }
        }
        else
        {
            this.Message = "Операция не м.б. выполнена, т.к. данные не валидны !";
            this.Title = "Предупреждение";
        }

        this.RenderMessage();
    }

    public override async Task ProccessingResponse()
    {
        if (this.OperationsResult == null)
        {
            this.Message += string.IsNullOrEmpty(this.OperationsResult.Result)
                           ? "Операция закончилась с ошибкой ! Новые топливные транзакции не были сохранены в системе !"
                           : this.OperationsResult?.Result ?? string.Empty;
            this.Title = "Предупреждение";
            this.ShouldUpdateParent = false;
        }
        else
        {
            this.Message += string.IsNullOrEmpty(this.OperationsResult.Result)
                           ? "Операция успешно завершена ! Новые топливные транзакции были сохранены в системе !"
                           : this.OperationsResult?.Result ?? string.Empty;

            this.Title = "Результат добавления коллекции топливных транзакций";

            if (this.OperationsResult is ResponseGroupActionDetailed<FuelTransactionShortResponse, FuelTransactionShortResponse> res)
            {
                this.AddedToDBItems = res?.SuccessItems?.Select(_ => _.ToString())?.ToList() ?? new();
                this.NotAddedToDBItems = res?.NotSuccessItems?.SelectMany(_ => new Dictionary<string, string> { { _.NotSuccessItem.ToString(), "Идентичная транзакция уже есть в БД" } })?.ToDictionary(x => x.Key, y => y.Value) ?? new();
                if ((this.AddedToDBItems?.Count ?? 0) > 0)
                    this.ShouldUpdateParent = true;
            }

            this.InitButtons();
        }
    }
}
